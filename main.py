import argparse
import sys
import threading
import time
from prometheus_client import start_http_server, Counter

string_array = []

with open('10-million-password-list-top-1000000.txt', 'r') as string_file:
    for line in string_file:
        temp_str = line.strip()
        if temp_str.isalpha():
            string_array.append(temp_str)


# process user inputs
def get_params():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--number_of_metrics', help="Total Number of metrics that should be generated", required=True
    )

    parser.add_argument(
        '--rate_of_metric_generation', help="new metric that should be generated in given time", required=True
    )

    parser.add_argument(
        '--time', help="timeframe in which new metric should be generated according to rate", required=False

    )

    args = parser.parse_args()
    total_metrics = int(args.number_of_metrics)
    rate = int(args.rate_of_metric_generation)
    timeframe = args.time
    if timeframe is None:
        timeframe = 30
    else:
        timeframe = int(timeframe)

    return total_metrics, rate, timeframe


# generate name of metrics
def metric_generation(total_metrics):
    metrics_array = []
    print("Metric Generation in progress")
    index = 0
    while len(metrics_array) < total_metrics:
        metrics_array.append("request_processing_seconds" + string_array[index])
        index += 1
    print("metric array generated")
    return metrics_array


# publish metrics for agent to scrap
def publish_metrics(metrics_array, reverse, total_metrics, rate, timeframe):
    generated_metrics = 0
    if reverse:
        index = len(metrics_array) - 1
        while index > total_metrics / 2:
            REQUEST_TIME = Counter(metrics_array[index], 'Time spent processing request', ['id'])
            REQUEST_TIME.labels(id=index).inc()
            index -= 1
            generated_metrics += 1
            if generated_metrics == rate // 2:
                time.sleep(timeframe)
                generated_metrics = 0
    else:
        index = 0
        while index <= total_metrics / 2:
            REQUEST_TIME = Counter(metrics_array[index], 'Time spent processing request', ['id'])
            REQUEST_TIME.labels(id=index).inc()
            index += 1
            generated_metrics += 1
            if generated_metrics == rate // 2:
                time.sleep(timeframe)
                generated_metrics = 0


if __name__ == '__main__':
    number_of_metrics, rate_of_metric_generation, timeframe = get_params()

    if rate_of_metric_generation < 2:
        print("Minimum value for rate of metric generation should be 2")
        sys.exit()

    if number_of_metrics > 388921:
        print(
            "Number of metrics higher than total possible than can be generated by this script. Max value can be 388921")
        sys.exit()

    start_http_server(8080)

    metric_start_time = time.time()
    metric_array = metric_generation(number_of_metrics)
    print("total time taken to create metrics name is ", (time.time() - metric_start_time))

    # Generate some metrics
    print("Start publishing metrics")
    thread_1 = threading.Thread(target=publish_metrics,
                                args=(metric_array, True, number_of_metrics, rate_of_metric_generation, timeframe))
    thread_2 = threading.Thread(target=publish_metrics,
                                args=(metric_array, False, number_of_metrics, rate_of_metric_generation, timeframe))
    thread_1.start()
    thread_2.start()

    while True:
        pass
